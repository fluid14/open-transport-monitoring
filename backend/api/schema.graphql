type Mutation {
	# Device
	createDevice(name: String!): Device!
	registerDevice(name: String!): DeviceRegistered
	passDeviceMessage(message: DeviceOutput!): DeviceMessage
	# Vehicle
	addVehicle(deviceId: String!,
		numberPlate: String!,
		brand: String!,
		model: String!,
		insuranceDate: String!,
		inspectionDate: String!
	): Vehicle
	updateVehicle(
		vehicleId: String!,
		deviceId: String!,
		numberPlate: String!,
		brand: String!,
		model: String!,
		insuranceDate: String!,
		inspectionDate: String!
	): Vehicle
	deleteVehicle(vehicleId: String!): Boolean
}

type Query {
	allDevices: [Device]!
	deviceCertificates(deviceName: String!): [String]
	allVehicles: [Vehicle]
	singleVehicle(vehicleId: String!): Vehicle
	vehicleParameterLimits: [ParameterLimit]
	devicesLastMessage: [DeviceLastMessageWrapper]
}

type Subscription {
	registeredDevice(name: String): DeviceRegistered
		@aws_subscribe(mutations: ["registerDevice"])
	deviceMessage(deviceName: String!): DeviceMessage
		@aws_subscribe(mutations: ["passDeviceMessage"])
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}

type Device {
	name: String!
	arn: String!
}

type DeviceRegistered {
	name: String!
	registered: Boolean!
}

type Vehicle {
	vehicleId: String!
	deviceId: String!
	numberPlate: String!
	brand: String!
	model: String!
	insuranceDate: String!
	inspectionDate: String!
}

type ParameterLimit {
	name: String!,
	min: Int!,
	max: Int!,
	unit: String!
}

type VehicleErrors {
	engine: Boolean
  oilLevel: Boolean
  coolantTemperature: Boolean
  battery: Boolean
  abs: Boolean
  powerSteering: Boolean
}

type DeviceMessage {
	deviceName: String!
	speed: Int
	rpm: Int
	oilTemperature: Float
	oilPressure: Float
	fuelLevel: Float
	fuelConsumption: Float
	fuelRange: Float
	tyresPressure: [Float]
	mileage: Float
	rideTime: Float
	position: [Float]
	errors: VehicleErrors
}

type DeviceLastMessage {
	data: DeviceMessage
	deviceName: String
	timestamp: Float
}

type DeviceLastMessageWrapper {
	deviceName: String!
	message: DeviceLastMessage
}

input DeviceOutput {
	deviceName: String!
	speed: Int
	rpm: Int
	oilTemperature: Float
	oilPressure: Float
	fuelLevel: Float
	fuelConsumption: Float
	fuelRange: Float
	tyresPressure: [Float]
	mileage: Float
	rideTime: Float
	position: [Float]
	errors: VehicleErrorsOutput
}

input VehicleErrorsOutput {
	engine: Boolean
	oilLevel: Boolean
	coolantTemperature: Boolean
	battery: Boolean
	abs: Boolean
	powerSteering: Boolean
}

service: api
app: transportation-iot
org: opentransportmonitoring

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

plugins:
  - serverless-appsync-plugin

package:
  individually: true
  exclude:
    - "**/*"

custom:
  appSync:
    name: API-${self:provider.stage}
    authenticationType: API_KEY
    dataSources:
      - type: AWS_LAMBDA
        name: allDevices
        description: 'Get all devices'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: device-${self:provider.stage}-getRegisteredDevices
      - type: NONE
        name: registerDevice
        description: 'Register device local'
      - type: AWS_LAMBDA
        name: createDevice
        description: 'Create device'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: device-${self:provider.stage}-registerIotDevice
      - type: AWS_LAMBDA
        name: getDeviceCertificates
        description: 'Get device certificates'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: device-${self:provider.stage}-getDeviceCertificates
      - type: NONE
        name: deviceMessage
        description: 'Device message local'
      - type: AWS_LAMBDA
        name: addVehicle
        description: 'Add vehicle'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: vehicle-${self:provider.stage}-addVehicle
      - type: AWS_LAMBDA
        name: deleteVehicle
        description: 'Delete vehicle'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: vehicle-${self:provider.stage}-deleteVehicle
      - type: AWS_LAMBDA
        name: getAllVehicles
        description: 'Get all vehicles'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: vehicle-${self:provider.stage}-getAllVehicles
      - type: AWS_LAMBDA
        name: getVehicle
        description: 'Get vehicle'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: vehicle-${self:provider.stage}-getVehicle
      - type: AWS_LAMBDA
        name: updateVehicle
        description: 'Update vehicle'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: vehicle-${self:provider.stage}-updateVehicle
      - type: AWS_LAMBDA
        name: getVehicleParameterLimits
        description: 'Get vehicle parameter limits'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: vehicle-${self:provider.stage}-getVehicleParameterLimits
      - type: AWS_LAMBDA
        name: getLastMessageOfEachDevice
        description: 'Get last event of each device'
        config:
          lambdaFunctionArn:
            Fn::ImportValue: events-${self:provider.stage}-getLastEventOfEachDevice
    mappingTemplates:
      - dataSource: allDevices
        type: Query
        field: allDevices
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: getDeviceCertificates
        type: Query
        field: deviceCertificates
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: createDevice
        type: Mutation
        field: createDevice
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: registerDevice
        type: Mutation
        field: registerDevice
        request: device_registered.request.vtl
        response: standard.response.vtl
      - dataSource: deviceMessage
        type: Mutation
        field: passDeviceMessage
        request: device_message.request.vtl
        response: standard.response.vtl
      - dataSource: addVehicle
        type: Mutation
        field: addVehicle
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: getVehicle
        type: Query
        field: singleVehicle
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: getVehicleParameterLimits
        type: Query
        field: vehicleParameterLimits
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: getAllVehicles
        type: Query
        field: allVehicles
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: updateVehicle
        type: Mutation
        field: updateVehicle
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: deleteVehicle
        type: Mutation
        field: deleteVehicle
        request: standard.request.vtl
        response: standard.response.vtl
      - dataSource: getLastMessageOfEachDevice
        type: Query
        field: devicesLastMessage
        request: standard.request.vtl
        response: standard.response.vtl

functions:
  - ${file(mutations/device_registered/description.yml)}
  - ${file(mutations/device_message/description.yml)}

outputs:
    apiUrl: !GetAtt GraphQlApi.GraphQLUrl
    apiKey: !GetAtt GraphQlApiKeyDefault.ApiKey
